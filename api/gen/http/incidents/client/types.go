// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Incidents HTTP client types
//
// Command:
// $ goa gen github.com/lawrencejones/goa-example/api/design -o api

package client

import (
	incidents "github.com/lawrencejones/goa-example/api/gen/incidents"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "Incidents" service "Create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of the incident
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateResponseBody is the type of the "Incidents" service "Create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique identifier for the incident
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the incident
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "Create" endpoint of the "Incidents" service.
func NewCreateRequestBody(p *incidents.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateIncidentOK builds a "Incidents" service "Create" endpoint result
// from a HTTP "OK" response.
func NewCreateIncidentOK(body *CreateResponseBody) *incidents.Incident {
	v := &incidents.Incident{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
