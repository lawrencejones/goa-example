/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IncidentsCreateRequestBody,
    IncidentsCreateRequestBodyFromJSON,
    IncidentsCreateRequestBodyToJSON,
    IncidentsCreateResponseBody,
    IncidentsCreateResponseBodyFromJSON,
    IncidentsCreateResponseBodyToJSON,
} from '../models';

export interface IncidentsCreateRequest {
    createRequestBody: IncidentsCreateRequestBody;
}

/**
 * 
 */
export class IncidentsApi extends runtime.BaseAPI {

    /**
     * Create a new incident
     * Create Incidents
     */
    async incidentsCreateRaw(requestParameters: IncidentsCreateRequest): Promise<runtime.ApiResponse<IncidentsCreateResponseBody>> {
        if (requestParameters.createRequestBody === null || requestParameters.createRequestBody === undefined) {
            throw new runtime.RequiredError('createRequestBody','Required parameter requestParameters.createRequestBody was null or undefined when calling incidentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/incidents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncidentsCreateRequestBodyToJSON(requestParameters.createRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IncidentsCreateResponseBodyFromJSON(jsonValue));
    }

    /**
     * Create a new incident
     * Create Incidents
     */
    async incidentsCreate(requestParameters: IncidentsCreateRequest): Promise<IncidentsCreateResponseBody> {
        const response = await this.incidentsCreateRaw(requestParameters);
        return await response.value();
    }

}
